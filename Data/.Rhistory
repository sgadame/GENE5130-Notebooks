library(circlize)
counts_data <- read.table("counts.txt", header=TRUE, row.names=1)
HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2), height = unit(4, "cm")))
l2_val <- as.matrix(downregulated$log2FoldChange)
colnames(l2_val)<-"logFC"
mean <- as.matrix(downregulated$baseMean)
colnames(mean)<-"AvgExpr"
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
col_AvgExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unti(2, "cm")))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled[rows_keep,], cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = T)
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = T)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h1+h2+h3
downregulated
# Get results for infection vs control
res <- results(dds, name = "treatment_Infected_vs_Control", alpha = 0.05)
# Convert to dataframe and add gene symbols
res_df <- as.data.frame(res)
res_df$symbol <- rownames(res_df)  # IDs are already symbols
# Filter for significantly downregulated genes
downregulated <- res_df %>%
filter(!is.na(padj), padj < 0.05, baseMean > 100, log2FoldChange < -1)
# Filter for significantly downregulated genes
downregulatedGO <- res_df %>%
filter(!is.na(padj), padj < 0.05, log2FoldChange < 0)
downregulated
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(colData)] #sig genes x samples
colnames(mat) <- rownames(colData)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
l2_val <- as.matrix(downregulated$log2FoldChange)
colnames(l2_val)<-"logFC"
mean <- as.matrix(downregulated$baseMean)
colnames(mean)<-"AvgExpr"
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
col_AvgExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = T)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h1+h2+h3
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(sample_info)] #sig genes x samples
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
#rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(sample_info)] #sig genes x samples
rownames(assay(rlog_out))
rownames(downregulated)
library(tidyverse)
library(clusterProfiler)
library(ComplexHeatmap)
library(DESeq2)
library(EnhancedVolcano)
library(org.Mm.eg.db)
library(dplyr)
library(RColorBrewer)
library(circlize)
counts_data <- read.table("counts.txt", header=TRUE, row.names=1)
# Remove the gene length and other metadata columns and convert counts to a matrix
counts_matrix <- counts_data[,6:ncol(counts_data)]
sample_info <- data.frame(
row.names = colnames(counts_matrix),
age = factor(c("MidAge", "MidAge", "Young", "Young")),
treatment = factor(c("Control", "Infected", "Control", "Infected"))
)
rownames(sample_info) <- sample_info$sample
dds <- DESeqDataSetFromMatrix(
countData = counts_matrix,
colData = sample_info,
design = ~ treatment + age # Tests treatment effect while controlling for age
)
# Set reference levels
dds$treatment <- relevel(dds$treatment, ref = "Control")
dds$age <- relevel(dds$age, ref = "Young")
# Run DESeq2
dds <- DESeq(dds)
# Get results for infection vs control
res <- results(dds, name = "treatment_Infected_vs_Control", alpha = 0.05)
# Convert to dataframe and add gene symbols
res_df <- as.data.frame(res)
res_df$symbol <- rownames(res_df)  # IDs are already symbols
# Filter for significantly downregulated genes
downregulated <- res_df %>%
filter(!is.na(padj), padj < 0.05, baseMean > 100, log2FoldChange < -1)
# Filter for significantly downregulated genes
downregulatedGO <- res_df %>%
filter(!is.na(padj), padj < 0.05, log2FoldChange < 0)
# Create a volcano plot for interaction effect
EnhancedVolcano(res_df,
x = 'log2FoldChange',
y = 'padj',
lab = res_df$symbol,
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 4.0,
colAlpha = 0.8,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 4.0,
drawConnectors = TRUE,
widthConnectors = 0.5,
colConnectors = 'grey50',
maxoverlapsConnectors = 25)
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
#rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(sample_info)] #sig genes x samples
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(colData)] #sig genes x samples
colnames(mat) <- rownames(colData)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
l2_val <- as.matrix(downregulated$log2FoldChange)
colnames(l2_val)<-"logFC"
mean <- as.matrix(downregulated$baseMean)
colnames(mean)<-"AvgExpr"
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
col_AvgExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
#h1 <- Heatmap(mat.scaled, cluster_rows = F,
#column_labels = colnames(mat.scaled), name="Z-score",
#cluster_columns = T)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h2+h3
h
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = T)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h1+h2+h3
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(colData(dds))] #sig genes x samples
colnames(mat) <- rownames(colData(dds))
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
l2_val <- as.matrix(downregulated$log2FoldChange)
colnames(l2_val)<-"logFC"
mean <- as.matrix(downregulated$baseMean)
colnames(mean)<-"AvgExpr"
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
col_AvgExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = T)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h1+h2+h3
h
downregulated
# Get results for infection vs control
res <- results(dds, name = "treatment_Infected_vs_Control", alpha = 0.05)
# Convert to dataframe and add gene symbols
res_df <- as.data.frame(res)
res_df$symbol <- rownames(res_df)  # IDs are already symbols
# Filter for significantly downregulated genes
downregulated <- res_df %>%
filter(!is.na(padj), padj < 0.05, baseMean > 100, log2FoldChange < -2)
# Filter for significantly downregulated genes
downregulatedGO <- res_df %>%
filter(!is.na(padj), padj < 0.05, log2FoldChange < 0)
# Create a volcano plot for interaction effect
EnhancedVolcano(res_df,
x = 'log2FoldChange',
y = 'padj',
lab = res_df$symbol,
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 4.0,
colAlpha = 0.8,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 4.0,
drawConnectors = TRUE,
widthConnectors = 0.5,
colConnectors = 'grey50',
maxoverlapsConnectors = 25)
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(colData(dds))] #sig genes x samples
colnames(mat) <- rownames(colData(dds))
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
l2_val <- as.matrix(downregulated$log2FoldChange)
colnames(l2_val)<-"logFC"
mean <- as.matrix(downregulated$baseMean)
colnames(mean)<-"AvgExpr"
l2_val <- as.matrix(downregulated$log2FoldChange)
colnames(l2_val)<-"logFC"
mean <- as.matrix(downregulated$baseMean)
colnames(mean)<-"AvgExpr"
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
col_AvgExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = T)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h1+h2+h3
h
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = TRUE,
width = unit(8, "cm"),
height = unit(15, "cm")
)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = FALSE,
name = "logFC",
col = col_logFC,
width = unit(2, "cm"),  # Narrower for the logFC column
height = unit(15, "cm"), # Same height as h1
cell_fun = function(j, i, x, y, w, h, col) {
grid.text(round(downregulated$log2FoldChange[i], 2), x, y)
}
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = FALSE,
name = "AvgExpr",
col = col_AvgExpr,
width = unit(2, "cm"),  # Narrower for AvgExpr
height = unit(15, "cm"), # Same height as h1
cell_fun = function(j, i, x, y, w, h, col) {
grid.text(round(downregulated$baseMean[i], 2), x, y)
}
)
h<-h1+h2+h3
h
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = TRUE,
width = unit(8, "cm"),
height = unit(15, "cm")
)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h1+h2+h3
h
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2),
height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled, cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = T)
h2 <- Heatmap(l2_val, row_labels = downregulated$symbol,
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(l2_val[i, j],2), x, y)
)
h3 <- Heatmap(mean, row_labels = downregulated$symbol,
cluster_rows = F, name = "AvgExpr", col=col_AvgExpr,
cell_fun = function(j, i, x, y, w, h, col)
grid.text(round(mean[i, j],2), x, y)
)
h<-h1+h2+h3
h
if(nrow(downregulated) > 0) {
mat <- counts(dds, normalized = T)[rownames(downregulated),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- colnames(mat)
#Colors
age_colors <- list(Age = c("Young" = "black", "MidAge" = "lightgray"))
treatment_colors <- list(Treatment = c("Control" = "green", "Infected" = "yellow"))
# Plot
Heatmap(mat.z,
name = "Z-score",
top_annotation = HeatmapAnnotation(
Age = sample_info$age,
Treatment = sample_info$treatment,
col = list(Age = age_colors$Age,
Treatment = treatment_colors$Treatment)
),
show_row_names = TRUE,
row_names_gp = gpar(fontsize = 8),
column_title = "Downregulated Genes")  # Note this is now inside the parentheses
}
# Get results for infection vs control
res <- results(dds, name = "treatment_Infected_vs_Control", alpha = 0.05)
# Convert to dataframe and add gene symbols
res_df <- as.data.frame(res)
res_df$symbol <- rownames(res_df)  # IDs are already symbols
# Filter for significantly downregulated genes
downregulated <- res_df %>%
filter(!is.na(padj), padj < 0.05, baseMean > 100, log2FoldChange < -2)
# Filter for significantly downregulated genes
downregulatedGO <- res_df %>%
filter(!is.na(padj), padj < 0.05, log2FoldChange < 0)
# Create a volcano plot for interaction effect
EnhancedVolcano(res_df,
x = 'log2FoldChange',
y = 'padj',
lab = res_df$symbol,
pCutoff = 0.05,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 4.0,
colAlpha = 0.8,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 4.0,
drawConnectors = TRUE,
widthConnectors = 0.5,
colConnectors = 'grey50',
maxoverlapsConnectors = 25)
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(colData(dds))] #sig genes x samples
colnames(mat) <- rownames(colData(dds))
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
downregulated <- downregulated[order(downregulated$log2FoldChange, decreasing = TRUE),]
rlog_out <- rlog(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(downregulated), rownames(colData(dds))] #sig genes x samples
colnames(mat) <- rownames(colData(dds))
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
l2_val <- as.matrix(downregulated$log2FoldChange)
colnames(l2_val)<-"logFC"
mean <- as.matrix(downregulated$baseMean)
colnames(mean)<-"AvgExpr"
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
col_AvgExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
if(nrow(downregulated) > 0) {
mat <- counts(dds, normalized = T)[rownames(downregulated),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- colnames(mat)
#Colors
age_colors <- list(Age = c("Young" = "black", "MidAge" = "lightgray"))
treatment_colors <- list(Treatment = c("Control" = "green", "Infected" = "yellow"))
# Plot
Heatmap(mat.z,
name = "Z-score",
top_annotation = HeatmapAnnotation(
Age = sample_info$age,
Treatment = sample_info$treatment,
col = list(Age = age_colors$Age,
Treatment = treatment_colors$Treatment)
),
show_row_names = TRUE,
row_names_gp = gpar(fontsize = 8),
column_title = "Downregulated Genes")  # Note this is now inside the parentheses
}
# Map symbols to Entrez IDs
entrez_ids <- mapIds(
org.Mm.eg.db,
keys = rownames(downregulatedGO),
keytype = "SYMBOL",  # Because your IDs are symbols
column = "ENTREZID"
)
# Remove NA values (genes without Entrez IDs)
entrez_ids <- na.omit(entrez_ids)
genes_to_test <- rownames(downregulatedGO)
GO_results <- enrichGO(gene = entrez_ids, OrgDb = "org.Mm.eg.db", keyType = 'ENTREZID', ont = "BP")
barplot(GO_results, showCategory=10)
if(nrow(downregulated) > 0) {
mat <- counts(dds, normalized = T)[rownames(downregulated),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- colnames(mat)
#Colors
age_colors <- list(Age = c("Young" = "black", "MidAge" = "lightgray"))
treatment_colors <- list(Treatment = c("Control" = "green", "Infected" = "yellow"))
# Plot
Heatmap(mat.z,
name = "Z-score",
top_annotation = HeatmapAnnotation(
Age = sample_info$age,
Treatment = sample_info$treatment,
col = list(Age = age_colors$Age,
Treatment = treatment_colors$Treatment)
),
show_row_names = TRUE,
row_names_gp = gpar(fontsize = 8),
column_title = "Downregulated Genes")  # Note this is now inside the parentheses
}
setwd("~/Documents/GitHub/GENE5130-Notebooks/Data")
### Edit this line so your notebook renders properly
knitr::opts_knit$set(root.dir = normalizePath("~/Documents/GENE5130"))
#### First install the car package, this has a bunch of classic datasets used when learning ML.
#install.packages("car")
library(car)
install.packages("car")
#### First install the car package, this has a bunch of classic datasets used when learning ML.
#install.packages("car")
library(car)
library(ggplot2)
library(readr)
#### Look at the very elitist prestige package
help("Prestige")
ggplot(Prestige, aes(x= education, y = prestige)) + geom_point()
reg1<-lm(prestige ~ education, data = Prestige)
summary(reg1)
reg1<-lm(prestige ~ education, data = Prestige)
summary(reg1)
### Look at the example below, we are adding multiple predictors
reg2<-lm(prestige~education+log(income)+women, data=Prestige)
summary(reg2)
### We can add categorical data.
reg3<-lm(prestige~education+log(income)+type,data=Prestige)
summary(reg3)
#reorder categorical data to have a "basal" category
Prestige$type <- with(Prestige, factor(type, levels = c("bc","wc","prof")))
### Edit this line so your notebook renders properly
knitr::opts_knit$set(root.dir = normalizePath("~/Data"))
data <- read_csv("Cholesterol.csv")
### Edit this line so your notebook renders properly
knitr::opts_knit$set(root.dir = normalizePath("~/Documents/Github/GENE5130-Notebooks/Data"))
data <- read_csv("Cholesterol.csv")
View(data)
### Plot the data,
ggplot(data, aes(x= rs6669795, y= CHOL))
### Plot the data,
ggplot(data, aes(x= rs6669795, y= CHOL)) + geom_point()
### Plot the data,
#ggplot(data, aes(x= rs6669795, y= CHOL)) + geom_point()
model<-lm(CHOL ~ rs12140539, data =data))
### Plot the data,
#ggplot(data, aes(x= rs6669795, y= CHOL)) + geom_point()
model<-lm(CHOL ~ rs12140539, data =data)
summary(model)
